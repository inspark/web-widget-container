/* ==========================================================================
   #GRID
   ========================================================================== */

/*
Grid (also flexbox)

Deprecated: For flexbox grid use Flexbox object. It has much more options and better integration to SEM NEXT UI.
We’ll drop support for these wikis on April 20, 2017.

The grid is the easiest way to produce a fluid responsive layout. Its easy to use and very flexible.

* Color key:
 * grids are pink
 * cells are blue
 * padding is green

markup:
<div class="o-grid o-grid_demo">
  <div class="o-grid__cell">
    <div class="o-grid-text">
      first
    </div>
  </div>
  <div class="o-grid__cell">
    <div class="o-grid-text">
      second
    </div>
  </div>
  <div class="o-grid__cell">
    <div class="o-grid-text">
      third
    </div>
  </div>
</div>

Styleguide 5.14.0
*/

/*
Width

Deprecated: For flexbox grid use Flexbox object. It has much more options and better integration to SEM NEXT UI.
We’ll drop support for these wikis on April 20, 2017.

Use the `.o-grid__cell_width-xx` class to apply widths to your cells. If you add a width to one cell the other cells will
automatically take up the rest of the space equally.

markup:
<div class="o-grid o-grid_demo">
    <div class="o-grid__cell o-grid__cell_width-50">
        <div class="o-grid-text">first</div>
    </div>
    <div class="o-grid__cell">
        <div class="o-grid-text">second</div>
    </div>
    <div class="o-grid__cell">
        <div class="o-grid-text">third</div>
    </div>
</div>

Styleguide 5.14.1
*/

/*
Offsets

Deprecated: For flexbox grid use Flexbox object. It has much more options and better integration to SEM NEXT UI.
We’ll drop support for these wikis on April 20, 2017.

To "push" a cell horizontally across the grid use the `.o-grid__cell_offset-xx` class. Use in conjunction with widths to
perfectly align your cells.

markup:
<div class="o-grid o-grid_demo">
    <div class="o-grid__cell o-grid__cell_width-20">
        <div class="o-grid-text">first</div>
    </div>
    <div class="o-grid__cell o-grid__cell_width-20 o-grid__cell_offset-60">
        <div class="o-grid-text">second</div>
    </div>
</div>

Styleguide 5.14.2
*/

/*
Wrapping

Deprecated: For flexbox grid use Flexbox object. It has much more options and better integration to SEM NEXT UI.
We’ll drop support for these wikis on April 20, 2017.

A grid is essentially a row of cells. However cells can wrap onto the next line within the grid.

Here we have 2 cells, 50% and 66.6666% wide, but the grid is only 100% wide...eek!

markup:
<div class="o-grid o-grid_demo">
    <div class="o-grid__cell o-grid__cell_width-50">
        <div class="o-grid-text">first</div>
    </div>
    <div class="o-grid__cell o-grid__cell_width-66">
        <div class="o-grid-text">second</div>
    </div>
</div>

Styleguide 5.14.3
*/

/*
Nesting

Deprecated: For flexbox grid use Flexbox object. It has much more options and better integration to SEM NEXT UI.
We’ll drop support for these wikis on April 20, 2017.

You can nest grids inside cells with relative ease...with nesting you're into advanced territory!

markup:
<div class="o-grid o-grid_demo">
    <div class="o-grid__cell">
        <div class="o-grid">
            <div class="o-grid__cell">
                <div class="o-grid-text">first</div>
            </div>
            <div class="o-grid__cell">
                <div class="o-grid-text">second</div>
            </div>
        </div>
        <div class="o-grid">
            <div class="o-grid__cell">
                <div class="o-grid-text">third</div>
            </div>
            <div class="o-grid__cell">
                <div class="o-grid-text">fourth</div>
            </div>
        </div>
    </div>
    <div class="o-grid__cell">
        <div class="o-grid-text">fifth</div>
    </div>
</div>


Styleguide 5.14.4
*/

/*
Vertical Alignment

Deprecated: For flexbox grid use Flexbox object. It has much more options and better integration to SEM NEXT UI.
We’ll drop support for these wikis on April 20, 2017.

Per `.o-grid`

If one of your cells is tall you can apply a vertical alignment modifier class to the grid.
`.o-grid_top`, `.o-grid_center` and `.o-grid_bottom` are supported.

Per `.o-grid__cell`

You can override the vertical alignment of all the cells in the grid by specifying per cell.
`.o-grid__cell_top`, `.o-grid__cell_center` and `.o-grid__cell_bottom` are supported.

markup:
<div>Per .o-grid</div>
<div class="o-grid o-grid_bottom o-grid_demo">
    <div class="o-grid__cell">
        <div class="o-grid-text">first</div>
    </div>
    <div class="o-grid__cell">
        <div class="o-grid-text">second</div>
    </div>
    <div class="o-grid__cell">
        <div class="o-grid-text">third</div>
    </div>
    <div class="o-grid__cell">
        <div class="o-grid-text">fourth
            <br>fourth
            <br>fourth
            <br>fourth
            <br>fourth
            <br>
        </div>
    </div>
    <div class="o-grid-text"></div>
</div>
<div>Per .o-grid</div>
<div class="o-grid o-grid_bottom o-grid_demo">
    <div class="o-grid__cell o-grid__cell_top">
        <div class="o-grid-text">first</div>
    </div>
    <div class="o-grid__cell o-grid__cell_center">
        <div class="o-grid-text">second</div>
    </div>
    <div class="o-grid__cell">
        <div class="o-grid-text">third</div>
    </div>
    <div class="o-grid__cell">
        <div class="o-grid-text">fourth
            <br>fourth
            <br>fourth
            <br>fourth
            <br>fourth
            <br>
        </div>
    </div>
</div>

Styleguide 5.14.5
*/

/*
Gutters

Deprecated: For flexbox grid use Flexbox object. It has much more options and better integration to SEM NEXT UI.
We’ll drop support for these wikis on April 20, 2017.

Grid comes with a gutter around each grid cell; some padding either side.
Sometimes you want your cells to be flush with each other. To turn off all gutters use `.o-grid_no-gutter`
or cell specific `.o-grid__cell_no-gutter`

markup:
<div>to whole o-grid</div>
<div class="o-grid o-grid_no-gutter o-grid_demo">
    <div class="o-grid__cell">
        <div class="o-grid-text">first</div>
    </div>
    <div class="o-grid__cell">
        <div class="o-grid-text">second</div>
    </div>
    <div class="o-grid__cell">
        <div class="o-grid-text">third</div>
    </div>
</div>
<div>cell-specific</div>
<div class="o-grid o-grid_demo">
    <div class="o-grid__cell">
        <div class="o-grid-text">first</div>
    </div>
    <div class="o-grid__cell">
        <div class="o-grid-text">second</div>
    </div>
    <div class="o-grid__cell o-grid__cell_no-gutter">
        <div class="o-grid-text">third</div>
    </div>
</div>

Styleguide 5.14.8
*/

/*
Fixed widths

Deprecated: For flexbox grid use Flexbox object. It has much more options and better integration to SEM NEXT UI.
We’ll drop support for these wikis on April 20, 2017.

Usually cells in a grid will be fluid and responsive. If however you want to set a cell to a fixed width add the
`.o-grid__cell_width-fixed` modifier and give it a specific width.

markup:
<div class="o-grid o-grid_demo">
    <div class="o-grid__cell">
        <div class="o-grid-text">first</div>
    </div>
    <div class="o-grid__cell o-grid__cell_width-fixed" style="width: 250px">
        <div class="o-grid-text">static width of 250px</div>
    </div>
    <div class="o-grid__cell">
        <div class="o-grid-text">third</div>
    </div>
</div>

Styleguide 5.14.9
*/

.o-grid {
  @include grid;

  &_wrap {
    @include grid_wrap;
  }

  &_top {
    @include grid_top;
  }

  &_center {
    @include grid_center;
  }

  &_bottom {
    @include grid_bottom;
  }

  &_no-gutter {
    > .o-grid__cell {
      @include grid__cell_no-gutter;
    }
  }

  &_height-full {
    min-height: 100%;
  }

  &_height-100pc {
    height: 100%;
  }

  &__cell {
    @include grid__cell;

    @include grid__cells;

    width: 1%;
    min-width: 1px;

    &_top {
      @include grid__cell_top;
    }

    &_center {
      @include grid__cell_center;
    }

    &_bottom {
      @include grid__cell_bottom;
    }

    &_no-gutter {
      @include grid__cell_no-gutter;
    }

    &_width-fixed {
      @include grid__cell_width-fixed;
    }

    &_width-auto {
      @include grid__cell_width-auto;
    }

    &_hidden {
      @include grid__cell_hidden;
    }

    &_visible {
      @include grid__cell_visible;
    }

    &_order-3 {
      order: 3;
    }
  }
}



/*
Flex-direction

Compatible in IE10+.

By default, just applying the `.o-grid` class to a container will cause its children to lay themselves out in a horizontal
row. But we can specify the direction we want children to flow by adding the `.o-grid_row` or `.o-grid_col` classes to the
container:

`.o-grid_row` Lays children out horizontally from right-to-left

`.o-grid_row_rev` Lays children out horizontally in the reverse direction (from left-to-right). [must be applied with
class `.o-grid_row`]

`.o-grid_col` Lays children out vertically from top-to-bottom

`.o-grid_col_rev` Lays children out vertically in the reverse direction (from bottom-to-top) [must be applied with class
 `.o-grid_col`]

row - Lays children's horizontal flow direction
row_rev - Lays children`s horizontal flow direction from left-to-right
col - Lays children`s vertical flow direction
col_rev - Lays children out vertically in the reverse direction (from bottom-to-top)

markup:
<div class="o-grid o-grid_{$modifiers}">
  <div class="child">
    Child 1
  </div>
  <div class="child">
    Child 2
  </div>
  <div class="child">
    Child 3
  </div>
</div>

Styleguide 5.15.1
*/

.o-grid_row,
%o-flex_row {
  flex-direction: row;
}

.o-grid_row_rev,
%o-flex_row_rev {
  flex-direction: row-reverse;
}

.o-grid_col,
%o-flex_col {
  flex-direction: column;
}

.o-grid_col_rev,
%o-flex_col_rev {
  flex-direction: column-reverse;
}

.o-grid_row\@small {
  @include screen_small-and-up {
    flex-direction: row;
  }
}

.o-grid_col\@small {
  @include screen_small-and-up {
    flex-direction: column;
  }
}
