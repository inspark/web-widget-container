/* ==========================================================================
   #LAYOUT
   ========================================================================== */

/*
Layout

Grid-like layout system.

Styleguide 5.2
*/

/*
Simple example.

The layout object provides us with a column-style layout system. This file contains the basic structural elements,
but classes should be complemented with width utilities, for example:

markup:
<div class="o-layout">
 <div class="o-layout__item  u-1/2">
   column 1
 </div>
 <div class="o-layout__item  u-1/2">
   column 2
 </div>
</div>

Styleguide 5.2.1
*/

/*
Media-query-dependent column width

The above will create a two-column structure in which each column will fluidly fill half of the width of the parent.
We can have more complex systems:

markup:
<div class="o-layout">
  <div class="o-layout__item  u-1/1  u-1/3@desktop">
    column 1/1 on narrow screen and  1/3 on medium screen
  </div>
  <div class="o-layout__item  u-1/2  u-1/3@desktop">
    column 1/2 on narrow screen and  1/3 on medium screen
  </div>
  <div class="o-layout__item  u-1/2  u-1/3@desktop">
    column 1/2 on narrow screen and  1/3 on medium screen
  </div>
</div>

The above will create a system in which the first item will be 100% width until we enter our medium breakpoint,
when it will become 33.333% width. The second and third items will be 50% of their parent, until they also become
33.333% width at the medium breakpoint.

Styleguide 5.2.2
*/

/*
Column reverse

We can also manipulate entire layout systems by adding a series of modifiers to the `.o-layout` block. For example see
below. This will reverse the displayed order of the system so that it runs in the opposite order to our source,
effectively flipping the system over.

markup:
<div class="o-layout o-layout_reverse">
 <div class="o-layout__item  u-1/2">
   column 1
 </div>
 <div class="o-layout__item  u-1/2">
   column 2
 </div>
</div>

Styleguide 5.2.3
*/

/*
Layout centring

This will cause the system to fill up from either the centre or the right hand side. Default behaviour is to fill up the
layout system from the left. There are plenty more options available to us: explore them below.

left - filling with columns from left
center - filling with columns from center
right - filling with columns from right

markup:
<div class="o-layout  o-layout_{$modifiers}">
 <div class="o-layout__item  u-1/3">
   column 1
 </div>
 <div class="o-layout__item  u-1/3">
   column 2
 </div>
</div>

Styleguide 5.2.4
*/

// By default we use the `font-size: 0;` trick to remove whitespace between
// items. Set this to true in order to use a markup-based strategy like
// commenting out whitespace or minifying HTML.
$inuit-use-markup-fix: false !default;





/* Default/mandatory classes.
   ========================================================================== */

/**
 * 1. Allows us to use the layout object on any type of element.
 * 2. We need to defensively reset any box-model properties.
 * 3. Use the negative margin trick for multi-row grids:
 *    http://csswizardry.com/2011/08/building-better-grid-systems/
 */

.o-layout {
  display: block; /* [1] */
  margin:  0; /* [2] */
  padding: 0; /* [2] */
  list-style: none; /* [1] */
  margin-left: -$inuit-global-spacing-unit; /* [3] */

  @if ($inuit-use-markup-fix == false) {
    font-size: 0;
  }

}

/*
Layout Properties

1. Required in order to combine fluid widths with fixed gutters.
2. Allows us to manipulate grids vertically, with text-level properties, etc.
3. Default item alignment is with the tops of each other, like most traditional grid/layout systems.
4. By default, all layout items are full-width (mobile first).
5. Gutters provided by left padding:
http://csswizardry.com/2011/08/building-better-grid-systems/
6. Fallback for old IEs not supporting `rem` values.

Styleguide 5.2.5
*/

  .o-layout__item {
    box-sizing: border-box; /* [1] */
    display: inline-block; /* [2] */
    vertical-align: top; /* [3] */
    width: 100%; /* [4] */
    padding-left: $inuit-global-spacing-unit; /* [5] */

    @if ($inuit-use-markup-fix == false) {
      font-size: $inuit-global-font-size; /* [6] */
      font-size: 1rem;
    }

  }

/*
Gutter size modifiers

tiny - 0.25*spacing width gutter
small - 0.5*spacing width gutter
large - 2*spacing width gutter
huge - 4*spacing width gutter
flush - no gutters

markup:
<div class="o-layout  o-layout_{$modifiers}">
  <div class="o-layout__item  u-1/3 styleguide-grid-unit">
     <div style="background: #ccc">column 1</div>
  </div>
  <div class="o-layout__item  u-1/3 styleguide-grid-unit">
     <div style="background: #ccc">column 2</div>
  </div>
  <div class="o-layout__item  u-1/3 styleguide-grid-unit">
     <div style="background: #ccc">column 3</div>
  </div>
</div>

  Styleguide 5.2.6
*/
.o-layout_tiny {
  margin-left: -$inuit-global-spacing-unit-tiny;

  > .o-layout__item {
    padding-left: $inuit-global-spacing-unit-tiny;
  }
}


.o-layout_small {
  margin-left: -$inuit-global-spacing-unit-small;

  > .o-layout__item {
    padding-left: $inuit-global-spacing-unit-small;
  }

}


.o-layout_large {
  margin-left: -$inuit-global-spacing-unit-large;

  > .o-layout__item {
    padding-left: $inuit-global-spacing-unit-large;
  }

}


.o-layout_huge {
  margin-left: -$inuit-global-spacing-unit-huge;

  > .o-layout__item {
    padding-left: $inuit-global-spacing-unit-huge;
  }

}


.o-layout_flush {
  margin-left: 0;

  > .o-layout__item {
    padding-left: 0;
  }

}

/*
Vertical alignment modifiers

middle - align all grid items to the middles of each other.
bottom - align all grid items to the bottoms of each other.

markup:
<div class="o-layout  o-layout_{$modifiers}">
  <div class="o-layout__item  u-1/3 styleguide-grid-unit">
     <div style="background: #ccc">column 1</div>
  </div>
  <div class="o-layout__item  u-1/3 styleguide-grid-unit">
     <div style="background: #ccc">column 2</div>
  </div>
  <div class="o-layout__item  u-1/3 styleguide-grid-unit">
     <div style="background: #ccc">column 3</div>
  </div>
</div>

Styleguide 5.2.7
*/
/**
 * Align all grid items to the middles of each other.
 */

.o-layout_middle {

  > .o-layout__item {
    vertical-align: middle;
  }

}


/**
 * Align all grid items to the bottoms of each other.
 */

.o-layout_bottom {

  > .o-layout__item {
    vertical-align: bottom;
  }

}





/* Fill order modifiers.
   ========================================================================== */

/**
 * Fill up the layout system from the centre.
 */

.o-layout_center {
  text-align: center;

  > .o-layout__item {
    text-align: left;
  }

}


/**
 * Fill up the layout system from the right-hand side.
 */

.o-layout_right {
  text-align: right;

  > .o-layout__item {
    text-align: left;
  }

}


/**
 * Reverse the rendered order of the grid system.
 */

.o-layout_reverse {
  direction: rtl;

  > .o-layout__item {
    direction: ltr;
    text-align: left;
  }

}
